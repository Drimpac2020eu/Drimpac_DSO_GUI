#!/usr/bin/env node

/**
 * Module dependencies.
 */
var http = require('https');
const url = require('url');
const dotenv = require('dotenv');
dotenv.config();
const JDBC = require('@naxmefy/jdbc').JDBC
var properties = require('java-properties');
var values = properties.of(process.env.USEF_FOLDER + 'usef-environment/nodes/localhost/configuration/credentials.properties');


const jdbcDatabase = new JDBC({
  className: values.get('DB_DRIVER'),
  url: values.get('DB_URL'),
  username: values.get('DB_USER'),
  password: values.get('DB_PASSWORD')
})

function returnRefererUpperDSO(_req)
{
   return 'WWW_DRIMPAC_COM_DSO';
  // return (((url.parse(_req.headers.referer).pathname).replace(/\//g,'')).replace(/\./g,'_')).toUpperCase();
};

function returnRefererDSO(_req)
{
   return '/www.drimpac.com_DSO/';
   return url.parse(_req.headers.referer).pathname;
};

function returnRefererDSOUrl(_req)
{
  return 'www.drimpac.com';
  let str =  (url.parse(_req.headers.referer).pathname).replace(/\//g,'');
  return str.substring(0,str.length-4);
};

function returnRefererAGRUrl(_req)
{
 // return 'www.sorea.com';
  let str =  (url.parse(_req.headers.referer).pathname).replace(/\//g,'');
  return str.substring(0,str.length-4);
};

function returnRefererAGR(_req)
{
  // return '/www.sorea.com_AGR/';
   return url.parse(_req.headers.referer).pathname;
};

function returnRefererUpperAGR(_req)
{
  // return 'WWW_SOREA_COM_AGR';
   return (((url.parse(_req.headers.referer).pathname).replace(/\//g,'')).replace(/\./g,'_')).toUpperCase();
};

module.exports = {
  endpoint: process.env.DRIMPAC,
  mongoUser: process.env.MONGO_USER,
  mongoPass: process.env.MONGO_PASSWORD,
  mongoPort: process.env.MONGO_PORT,
  mongoIP: process.env.MONGO_IP,
  mongoAuthDb: process.env.MONGO_AUTH_DB,
  port: process.env.DRIMPAC_REST_PORT,
  drimpacPort: process.env.DRIMPAC_PORT,
  drimpacIP: process.env.DRIMPAC,
  myDatabase: jdbcDatabase,
  usefRefererDSO: returnRefererDSO,
  usefRefererAGR: returnRefererAGR,
  usefRefererUpperDSO: returnRefererUpperDSO,
  usefRefererUpperAGR: returnRefererUpperAGR,
  usefRefererDSOUrl: returnRefererDSOUrl,
  usefRefererAGRUrl: returnRefererAGRUrl
};





var app = require('../index');
var debug = require('debug')('file-upload-api:server');

var fs = require('fs');

var cors = require('cors');

// use it before all route definitions
app.use(cors({origin: '*'}));

const options = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem')
};




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.DRIMPAC_REST_PORT|| '9000');
app.set('port', port);


/**
 * Create HTTP server.
 */

 /**
 * var server = http.createServer(options,app);
 */

var server = http.createServer(options,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
