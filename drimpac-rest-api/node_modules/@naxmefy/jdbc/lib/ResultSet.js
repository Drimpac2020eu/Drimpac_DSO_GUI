"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const ResultSetMetaData_1 = require("./ResultSetMetaData");
class ResultSet {
    constructor(resultSet) {
        this.resultSet = resultSet;
    }
    next() {
        return this.resultSet.nextSync();
    }
    getMetaData() {
        return new ResultSetMetaData_1.ResultSetMetaData(this.resultSet.getMetaDataSync());
    }
    fetchResult() {
        const metas = this.getMetaData().getAllColumnMeta();
        const result = {};
        for (let i = 0; i < metas.length; i++) {
            const meta = metas[i];
            const getterName = 'get' + meta.type.name + 'Sync';
            if (typeof this.resultSet[getterName] !== 'function') {
                throw new Error(`Unknown type getter (${getterName}) for ${meta.type.name} for column ${meta.name} (${meta.label})`);
            }
            switch (true) {
                case meta.type.name === 'Date' || meta.type.name === 'Time' || meta.type.name === 'Timestamp':
                    const dateValue = this.resultSet[`${getterName}`](meta.label);
                    result[meta.label] = dateValue ? _.toString(dateValue) : null;
                    break;
                case meta.type.name === 'Int' && _.isNull(this.resultSet.getObjectSync(meta.label)):
                    result[meta.label] = null;
                    break;
                default:
                    result[meta.label] = this.resultSet[`${getterName}`](meta.label);
                    break;
            }
        }
        return result;
    }
    fetchAllResults() {
        const results = [];
        while (this.next()) {
            results.push(this.fetchResult());
        }
        return results;
    }
}
exports.ResultSet = ResultSet;
//# sourceMappingURL=ResultSet.js.map