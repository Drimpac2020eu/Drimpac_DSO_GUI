"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Promise = require("bluebird");
const j = require("java");
const deasync = require("deasync");
const debug = require("debug");
const events_1 = require("events");
const java = Promise.promisifyAll(j);
let instance = null;
class Java {
    constructor(useXrs = true, useMaven = true) {
        this.mavenClasspath = [];
        this.mavenDependencies = {};
        this._debug = debug('jdbc:Java');
        if (instance) {
            return instance;
        }
        instance = this;
        this.java = java;
        this.events = new events_1.EventEmitter();
        if (useXrs) {
            this._debug('use Xrs');
            this.addOption('-Xrs');
        }
        if (useMaven) {
            try {
                let done = false;
                const mvn = require('node-java-maven');
                mvn((err, deps) => {
                    if (err)
                        throw err;
                    this.mavenClasspath = deps.classpath;
                    this.mavenDependencies = deps.dependencies;
                    done = true;
                });
                deasync.loopWhile(() => !done);
                this.addClasspath(this.mavenClasspath);
            }
            catch (err) {
                if (err.code !== 'MODULE_NOT_FOUND') {
                    throw err;
                }
                else {
                    this._debug('node-jave-maven not found. useMaven is ignored.');
                }
            }
        }
        return instance;
    }
    static getInstance() {
        if (!instance) {
            instance = new Java();
        }
        return instance;
    }
    isJvmCreated() {
        return this.java.isJvmCreated();
    }
    addOption(option) {
        if (this.isJvmCreated() === false) {
            this.java.options.push(option);
        }
        else {
            throw new Error(`Can not add option '${option}', because JVM instance is already created`);
        }
    }
    addClasspath(dependencies) {
        if (this.isJvmCreated() === false) {
            this.java.classpath.push.apply(this.java.classpath, dependencies);
        }
        else {
            throw new Error(`Can not add classpath dependencies, because JVM instance is already created.\n\nDependencies: ${dependencies}`);
        }
    }
}
exports.Java = Java;
//# sourceMappingURL=Java.js.map