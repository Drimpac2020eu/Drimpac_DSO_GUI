import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { LocalDataSource } from '../local/local.data-source';
import { ServerSourceConf } from './server-source.conf';
import { Subject } from 'rxjs';
export declare class ServerDataSource extends LocalDataSource {
    protected http: HttpClient;
    protected conf: ServerSourceConf;
    protected lastRequestCount: number;
    protected onRequestStartSource: Subject<HttpParams>;
    protected onRequestEndSource: Subject<any>;
    protected onRequestCompleteSource: Subject<HttpResponse<Object>>;
    protected onRequestErrorSource: Subject<HttpResponse<Object>>;
    constructor(http: HttpClient, conf?: ServerSourceConf | {});
    count(): number;
    getElements(): Promise<any>;
    /**
     * Extracts array of data from server response
     * @param res
     * @returns {any}
     */
    protected extractDataFromResponse(res: any): Array<any>;
    /**
     * Extracts total rows count from the server response
     * Looks for the count in the heders first, then in the response body
     * @param res
     * @returns {any}
     */
    protected extractTotalFromResponse(res: any): number;
    protected requestElements(): Observable<any>;
    onRequestStart(): Observable<HttpParams>;
    onRequestEnd(): Observable<any>;
    onRequestComplete(): Observable<HttpResponse<Object>>;
    onRequestError(): Observable<any>;
    protected emitOnRequestStart(element: HttpParams): void;
    protected emitOnRequestEnd(): void;
    protected emitOnRequestComplete(element: HttpResponse<Object>): void;
    protected emitOnRequestError(element: any): void;
    protected createRequesParams(): HttpParams;
    protected addSortRequestParams(httpParams: HttpParams): HttpParams;
    protected addFilterRequestParams(httpParams: HttpParams): HttpParams;
    protected addPagerRequestParams(httpParams: HttpParams): HttpParams;
}
