import { HttpParams } from '@angular/common/http';
import { LocalDataSource } from '../local/local.data-source';
import { ServerSourceConf } from './server-source.conf';
import { getDeepFromObject } from '../../helpers';
import { map, finalize } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class ServerDataSource extends LocalDataSource {
    constructor(http, conf = {}) {
        super();
        this.http = http;
        this.lastRequestCount = 0;
        this.onRequestStartSource = new Subject();
        this.onRequestEndSource = new Subject();
        this.onRequestCompleteSource = new Subject();
        this.onRequestErrorSource = new Subject();
        this.conf = new ServerSourceConf(conf);
        if (!this.conf.endPoint) {
            throw new Error('At least endPoint must be specified as a configuration of the server data source.');
        }
    }
    count() {
        return this.lastRequestCount;
    }
    getElements() {
        return this.requestElements()
            .pipe(map(res => {
            this.lastRequestCount = this.extractTotalFromResponse(res);
            this.data = this.extractDataFromResponse(res);
            return this.data;
        })).toPromise();
    }
    /**
     * Extracts array of data from server response
     * @param res
     * @returns {any}
     */
    extractDataFromResponse(res) {
        const rawData = res.body;
        const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;
        if (data instanceof Array) {
            return data;
        }
        throw new Error(`Data must be an array.
    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);
    }
    /**
     * Extracts total rows count from the server response
     * Looks for the count in the heders first, then in the response body
     * @param res
     * @returns {any}
     */
    extractTotalFromResponse(res) {
        if (res.headers.has(this.conf.totalKey)) {
            return +res.headers.get(this.conf.totalKey);
        }
        else {
            const rawData = res.body;
            return getDeepFromObject(rawData, this.conf.totalKey, 0);
        }
    }
    requestElements() {
        let httpParams = this.createRequesParams();
        this.emitOnRequestStart(httpParams);
        return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' }).pipe(finalize(() => this.emitOnRequestEnd())).pipe(map(res => {
            this.emitOnRequestComplete(res);
            return res;
        }, err => {
            this.emitOnRequestError(err);
            return err;
        }));
    }
    onRequestStart() {
        return this.onRequestStartSource.asObservable();
    }
    onRequestEnd() {
        return this.onRequestEndSource.asObservable();
    }
    onRequestComplete() {
        return this.onRequestCompleteSource.asObservable();
    }
    onRequestError() {
        return this.onRequestErrorSource.asObservable();
    }
    emitOnRequestStart(element) {
        this.onRequestStartSource.next(element);
    }
    emitOnRequestEnd() {
        this.onRequestEndSource.next();
    }
    emitOnRequestComplete(element) {
        this.onRequestCompleteSource.next(element);
    }
    emitOnRequestError(element) {
        this.onRequestErrorSource.next(element);
    }
    createRequesParams() {
        let httpParams = new HttpParams();
        httpParams = this.addSortRequestParams(httpParams);
        httpParams = this.addFilterRequestParams(httpParams);
        return this.addPagerRequestParams(httpParams);
    }
    addSortRequestParams(httpParams) {
        if (this.sortConf) {
            this.sortConf.forEach((fieldConf) => {
                httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);
                httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());
            });
        }
        return httpParams;
    }
    addFilterRequestParams(httpParams) {
        if (this.filterConf.filters) {
            this.filterConf.filters.forEach((fieldConf) => {
                if (fieldConf['search']) {
                    httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);
                }
            });
        }
        return httpParams;
    }
    addPagerRequestParams(httpParams) {
        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {
            httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);
            httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);
        }
        return httpParams;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmRhdGEtc291cmNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG15a2VlbHMvbmcyLXNtYXJ0LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2xpYi9kYXRhLXNvdXJjZS9zZXJ2ZXIvc2VydmVyLmRhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxVQUFVLEVBQWdCLE1BQU0sc0JBQXNCLENBQUM7QUFHNUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGVBQWU7SUFVbkQsWUFBc0IsSUFBZ0IsRUFBRSxPQUE4QixFQUFFO1FBQ3RFLEtBQUssRUFBRSxDQUFDO1FBRFksU0FBSSxHQUFKLElBQUksQ0FBWTtRQU41QixxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFDN0IseUJBQW9CLEdBQUcsSUFBSSxPQUFPLEVBQWMsQ0FBQztRQUNqRCx1QkFBa0IsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQ3hDLDRCQUF1QixHQUFHLElBQUksT0FBTyxFQUF3QixDQUFDO1FBQzlELHlCQUFvQixHQUFHLElBQUksT0FBTyxFQUF3QixDQUFDO1FBS25FLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRkFBbUYsQ0FBQyxDQUFDO1NBQ3RHO0lBQ0gsQ0FB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QUFFLENBQUMsQ0FBQztZQUN2RixDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVTLHNCQUFzQixDQUFDLFVBQXNCO1FBRXJELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBYyxFQUFFLEVBQUU7Z0JBQ2pELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUN2QixVQUFVLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2lCQUNuSDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRVMscUJBQXFCLENBQUMsVUFBc0I7UUFFcEQsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUM1RSxVQUFVLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDN0UsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBMb2NhbERhdGFTb3VyY2UgfSBmcm9tICcuLi9sb2NhbC9sb2NhbC5kYXRhLXNvdXJjZSc7XG5pbXBvcnQgeyBTZXJ2ZXJTb3VyY2VDb25mIH0gZnJvbSAnLi9zZXJ2ZXItc291cmNlLmNvbmYnO1xuaW1wb3J0IHsgZ2V0RGVlcEZyb21PYmplY3QgfSBmcm9tICcuLi8uLi9oZWxwZXJzJztcblxuaW1wb3J0IHsgbWFwLCBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNsYXNzIFNlcnZlckRhdGFTb3VyY2UgZXh0ZW5kcyBMb2NhbERhdGFTb3VyY2Uge1xuXG4gIHByb3RlY3RlZCBjb25mOiBTZXJ2ZXJTb3VyY2VDb25mO1xuXG4gIHByb3RlY3RlZCBsYXN0UmVxdWVzdENvdW50OiBudW1iZXIgPSAwO1xuICBwcm90ZWN0ZWQgb25SZXF1ZXN0U3RhcnRTb3VyY2UgPSBuZXcgU3ViamVjdDxIdHRwUGFyYW1zPigpO1xuICBwcm90ZWN0ZWQgb25SZXF1ZXN0RW5kU291cmNlID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICBwcm90ZWN0ZWQgb25SZXF1ZXN0Q29tcGxldGVTb3VyY2UgPSBuZXcgU3ViamVjdDxIdHRwUmVzcG9uc2U8T2JqZWN0Pj4oKTtcbiAgcHJvdGVjdGVkIG9uUmVxdWVzdEVycm9yU291cmNlID0gbmV3IFN1YmplY3Q8SHR0cFJlc3BvbnNlPE9iamVjdD4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsIGNvbmY6IFNlcnZlclNvdXJjZUNvbmYgfCB7fSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuY29uZiA9IG5ldyBTZXJ2ZXJTb3VyY2VDb25mKGNvbmYpO1xuXG4gICAgaWYgKCF0aGlzLmNvbmYuZW5kUG9pbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXQgbGVhc3QgZW5kUG9pbnQgbXVzdCBiZSBzcGVjaWZpZWQgYXMgYSBjb25maWd1cmF0aW9uIG9mIHRoZSBzZXJ2ZXIgZGF0YSBzb3VyY2UuJyk7XG4gICAgfVxuICB9XG5cbiAgY291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5sYXN0UmVxdWVzdENvdW50O1xuICB9XG5cbiAgZ2V0RWxlbWVudHMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0RWxlbWVudHMoKVxuICAgICAgLnBpcGUobWFwKHJlcyA9PiB7XG4gICAgICAgIHRoaXMubGFzdFJlcXVlc3RDb3VudCA9IHRoaXMuZXh0cmFjdFRvdGFsRnJvbVJlc3BvbnNlKHJlcyk7XG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZXh0cmFjdERhdGFGcm9tUmVzcG9uc2UocmVzKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgICAgfSkpLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIGFycmF5IG9mIGRhdGEgZnJvbSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICogQHBhcmFtIHJlc1xuICAgKiBAcmV0dXJucyB7YW55fVxuICAgKi9cbiAgcHJvdGVjdGVkIGV4dHJhY3REYXRhRnJvbVJlc3BvbnNlKHJlczogYW55KTogQXJyYXk8YW55PiB7XG4gICAgY29uc3QgcmF3RGF0YSA9IHJlcy5ib2R5O1xuICAgIGNvbnN0IGRhdGEgPSAhIXRoaXMuY29uZi5kYXRhS2V5ID8gZ2V0RGVlcEZyb21PYmplY3QocmF3RGF0YSwgdGhpcy5jb25mLmRhdGFLZXksIFtdKSA6IHJhd0RhdGE7XG5cbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYERhdGEgbXVzdCBiZSBhbiBhcnJheS5cbiAgICBQbGVhc2UgY2hlY2sgdGhhdCBkYXRhIGV4dHJhY3RlZCBmcm9tIHRoZSBzZXJ2ZXIgcmVzcG9uc2UgYnkgdGhlIGtleSAnJHt0aGlzLmNvbmYuZGF0YUtleX0nIGV4aXN0cyBhbmQgaXMgYXJyYXkuYCk7XG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgdG90YWwgcm93cyBjb3VudCBmcm9tIHRoZSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICogTG9va3MgZm9yIHRoZSBjb3VudCBpbiB0aGUgaGVkZXJzIGZpcnN0LCB0aGVuIGluIHRoZSByZXNwb25zZSBib2R5XG4gICAqIEBwYXJhbSByZXNcbiAgICogQHJldHVybnMge2FueX1cbiAgICovXG4gIHByb3RlY3RlZCBleHRyYWN0VG90YWxGcm9tUmVzcG9uc2UocmVzOiBhbnkpOiBudW1iZXIge1xuICAgIGlmIChyZXMuaGVhZGVycy5oYXModGhpcy5jb25mLnRvdGFsS2V5KSkge1xuICAgICAgcmV0dXJuICtyZXMuaGVhZGVycy5nZXQodGhpcy5jb25mLnRvdGFsS2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmF3RGF0YSA9IHJlcy5ib2R5O1xuICAgICAgcmV0dXJuIGdldERlZXBGcm9tT2JqZWN0KHJhd0RhdGEsIHRoaXMuY29uZi50b3RhbEtleSwgMCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHJlcXVlc3RFbGVtZW50cygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGxldCBodHRwUGFyYW1zID0gdGhpcy5jcmVhdGVSZXF1ZXNQYXJhbXMoKTtcbiAgICB0aGlzLmVtaXRPblJlcXVlc3RTdGFydChodHRwUGFyYW1zKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmNvbmYuZW5kUG9pbnQsIHsgcGFyYW1zOiBodHRwUGFyYW1zLCBvYnNlcnZlOiAncmVzcG9uc2UnIH0pLnBpcGUoXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB0aGlzLmVtaXRPblJlcXVlc3RFbmQoKSlcbiAgICApLnBpcGUoXG4gICAgICBtYXAoXG4gICAgICAgIHJlcyA9PiB7XG4gICAgICAgICAgdGhpcy5lbWl0T25SZXF1ZXN0Q29tcGxldGUocmVzKTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LFxuICAgICAgICBlcnIgPT4ge1xuICAgICAgICAgIHRoaXMuZW1pdE9uUmVxdWVzdEVycm9yKGVycik7XG4gICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBvblJlcXVlc3RTdGFydCgpOiBPYnNlcnZhYmxlPEh0dHBQYXJhbXM+IHtcbiAgICByZXR1cm4gdGhpcy5vblJlcXVlc3RTdGFydFNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIG9uUmVxdWVzdEVuZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLm9uUmVxdWVzdEVuZFNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIG9uUmVxdWVzdENvbXBsZXRlKCk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPE9iamVjdD4+IHtcbiAgICByZXR1cm4gdGhpcy5vblJlcXVlc3RDb21wbGV0ZVNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIG9uUmVxdWVzdEVycm9yKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMub25SZXF1ZXN0RXJyb3JTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZW1pdE9uUmVxdWVzdFN0YXJ0KGVsZW1lbnQ6IEh0dHBQYXJhbXMpIHtcbiAgICB0aGlzLm9uUmVxdWVzdFN0YXJ0U291cmNlLm5leHQoZWxlbWVudCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZW1pdE9uUmVxdWVzdEVuZCgpIHtcbiAgICB0aGlzLm9uUmVxdWVzdEVuZFNvdXJjZS5uZXh0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZW1pdE9uUmVxdWVzdENvbXBsZXRlKGVsZW1lbnQ6IEh0dHBSZXNwb25zZTxPYmplY3Q+KSB7XG4gICAgdGhpcy5vblJlcXVlc3RDb21wbGV0ZVNvdXJjZS5uZXh0KGVsZW1lbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGVtaXRPblJlcXVlc3RFcnJvcihlbGVtZW50KSB7XG4gICAgdGhpcy5vblJlcXVlc3RFcnJvclNvdXJjZS5uZXh0KGVsZW1lbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVJlcXVlc1BhcmFtcygpOiBIdHRwUGFyYW1zIHtcbiAgICBsZXQgaHR0cFBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XG5cbiAgICBodHRwUGFyYW1zID0gdGhpcy5hZGRTb3J0UmVxdWVzdFBhcmFtcyhodHRwUGFyYW1zKTtcbiAgICBodHRwUGFyYW1zID0gdGhpcy5hZGRGaWx0ZXJSZXF1ZXN0UGFyYW1zKGh0dHBQYXJhbXMpO1xuICAgIHJldHVybiB0aGlzLmFkZFBhZ2VyUmVxdWVzdFBhcmFtcyhodHRwUGFyYW1zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRTb3J0UmVxdWVzdFBhcmFtcyhodHRwUGFyYW1zOiBIdHRwUGFyYW1zKTogSHR0cFBhcmFtcyB7XG4gICAgaWYgKHRoaXMuc29ydENvbmYpIHtcbiAgICAgIHRoaXMuc29ydENvbmYuZm9yRWFjaCgoZmllbGRDb25mKSA9PiB7XG4gICAgICAgIGh0dHBQYXJhbXMgPSBodHRwUGFyYW1zLnNldCh0aGlzLmNvbmYuc29ydEZpZWxkS2V5LCBmaWVsZENvbmYuZmllbGQpO1xuICAgICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5zZXQodGhpcy5jb25mLnNvcnREaXJLZXksIGZpZWxkQ29uZi5kaXJlY3Rpb24udG9VcHBlckNhc2UoKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHR0cFBhcmFtcztcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRGaWx0ZXJSZXF1ZXN0UGFyYW1zKGh0dHBQYXJhbXM6IEh0dHBQYXJhbXMpOiBIdHRwUGFyYW1zIHtcblxuICAgIGlmICh0aGlzLmZpbHRlckNvbmYuZmlsdGVycykge1xuICAgICAgdGhpcy5maWx0ZXJDb25mLmZpbHRlcnMuZm9yRWFjaCgoZmllbGRDb25mOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGZpZWxkQ29uZlsnc2VhcmNoJ10pIHtcbiAgICAgICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5zZXQodGhpcy5jb25mLmZpbHRlckZpZWxkS2V5LnJlcGxhY2UoJyNmaWVsZCMnLCBmaWVsZENvbmZbJ2ZpZWxkJ10pLCBmaWVsZENvbmZbJ3NlYXJjaCddKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkUGFnZXJSZXF1ZXN0UGFyYW1zKGh0dHBQYXJhbXM6IEh0dHBQYXJhbXMpOiBIdHRwUGFyYW1zIHtcblxuICAgIGlmICh0aGlzLnBhZ2luZ0NvbmYgJiYgdGhpcy5wYWdpbmdDb25mWydwYWdlJ10gJiYgdGhpcy5wYWdpbmdDb25mWydwZXJQYWdlJ10pIHtcbiAgICAgIGh0dHBQYXJhbXMgPSBodHRwUGFyYW1zLnNldCh0aGlzLmNvbmYucGFnZXJQYWdlS2V5LCB0aGlzLnBhZ2luZ0NvbmZbJ3BhZ2UnXSk7XG4gICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5zZXQodGhpcy5jb25mLnBhZ2VyTGltaXRLZXksIHRoaXMucGFnaW5nQ29uZlsncGVyUGFnZSddKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHR0cFBhcmFtcztcbiAgfVxufVxuIl19