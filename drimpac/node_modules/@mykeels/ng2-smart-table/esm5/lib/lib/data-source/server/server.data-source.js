import * as tslib_1 from "tslib";
import { HttpParams } from '@angular/common/http';
import { LocalDataSource } from '../local/local.data-source';
import { ServerSourceConf } from './server-source.conf';
import { getDeepFromObject } from '../../helpers';
import { map, finalize } from 'rxjs/operators';
import { Subject } from 'rxjs';
var ServerDataSource = /** @class */ (function (_super) {
    tslib_1.__extends(ServerDataSource, _super);
    function ServerDataSource(http, conf) {
        if (conf === void 0) { conf = {}; }
        var _this = _super.call(this) || this;
        _this.http = http;
        _this.lastRequestCount = 0;
        _this.onRequestStartSource = new Subject();
        _this.onRequestEndSource = new Subject();
        _this.onRequestCompleteSource = new Subject();
        _this.onRequestErrorSource = new Subject();
        _this.conf = new ServerSourceConf(conf);
        if (!_this.conf.endPoint) {
            throw new Error('At least endPoint must be specified as a configuration of the server data source.');
        }
        return _this;
    }
    ServerDataSource.prototype.count = function () {
        return this.lastRequestCount;
    };
    ServerDataSource.prototype.getElements = function () {
        var _this = this;
        return this.requestElements()
            .pipe(map(function (res) {
            _this.lastRequestCount = _this.extractTotalFromResponse(res);
            _this.data = _this.extractDataFromResponse(res);
            return _this.data;
        })).toPromise();
    };
    /**
     * Extracts array of data from server response
     * @param res
     * @returns {any}
     */
    ServerDataSource.prototype.extractDataFromResponse = function (res) {
        var rawData = res.body;
        var data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;
        if (data instanceof Array) {
            return data;
        }
        throw new Error("Data must be an array.\n    Please check that data extracted from the server response by the key '" + this.conf.dataKey + "' exists and is array.");
    };
    /**
     * Extracts total rows count from the server response
     * Looks for the count in the heders first, then in the response body
     * @param res
     * @returns {any}
     */
    ServerDataSource.prototype.extractTotalFromResponse = function (res) {
        if (res.headers.has(this.conf.totalKey)) {
            return +res.headers.get(this.conf.totalKey);
        }
        else {
            var rawData = res.body;
            return getDeepFromObject(rawData, this.conf.totalKey, 0);
        }
    };
    ServerDataSource.prototype.requestElements = function () {
        var _this = this;
        var httpParams = this.createRequesParams();
        this.emitOnRequestStart(httpParams);
        return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' }).pipe(finalize(function () { return _this.emitOnRequestEnd(); })).pipe(map(function (res) {
            _this.emitOnRequestComplete(res);
            return res;
        }, function (err) {
            _this.emitOnRequestError(err);
            return err;
        }));
    };
    ServerDataSource.prototype.onRequestStart = function () {
        return this.onRequestStartSource.asObservable();
    };
    ServerDataSource.prototype.onRequestEnd = function () {
        return this.onRequestEndSource.asObservable();
    };
    ServerDataSource.prototype.onRequestComplete = function () {
        return this.onRequestCompleteSource.asObservable();
    };
    ServerDataSource.prototype.onRequestError = function () {
        return this.onRequestErrorSource.asObservable();
    };
    ServerDataSource.prototype.emitOnRequestStart = function (element) {
        this.onRequestStartSource.next(element);
    };
    ServerDataSource.prototype.emitOnRequestEnd = function () {
        this.onRequestEndSource.next();
    };
    ServerDataSource.prototype.emitOnRequestComplete = function (element) {
        this.onRequestCompleteSource.next(element);
    };
    ServerDataSource.prototype.emitOnRequestError = function (element) {
        this.onRequestErrorSource.next(element);
    };
    ServerDataSource.prototype.createRequesParams = function () {
        var httpParams = new HttpParams();
        httpParams = this.addSortRequestParams(httpParams);
        httpParams = this.addFilterRequestParams(httpParams);
        return this.addPagerRequestParams(httpParams);
    };
    ServerDataSource.prototype.addSortRequestParams = function (httpParams) {
        var _this = this;
        if (this.sortConf) {
            this.sortConf.forEach(function (fieldConf) {
                httpParams = httpParams.set(_this.conf.sortFieldKey, fieldConf.field);
                httpParams = httpParams.set(_this.conf.sortDirKey, fieldConf.direction.toUpperCase());
            });
        }
        return httpParams;
    };
    ServerDataSource.prototype.addFilterRequestParams = function (httpParams) {
        var _this = this;
        if (this.filterConf.filters) {
            this.filterConf.filters.forEach(function (fieldConf) {
                if (fieldConf['search']) {
                    httpParams = httpParams.set(_this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);
                }
            });
        }
        return httpParams;
    };
    ServerDataSource.prototype.addPagerRequestParams = function (httpParams) {
        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {
            httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);
            httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);
        }
        return httpParams;
    };
    return ServerDataSource;
}(LocalDataSource));
export { ServerDataSource };
//# sourceMappingURL=data:application/json;base64,